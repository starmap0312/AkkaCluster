akka {
  loglevel = INFO // log level for Actor that extends with ActorLogging, ex. log.debug("message")
}

// for akka cluster
akka {
  actor {
    provider = "cluster" // required
    deployment {
      /node/processorRouter { // specify the path to the router actor, which is /node/processorRouter
        // configure the behaviour of the router
        router = round-robin-group // the policy for the load balancing of messages
        routees.paths = ["/user/node/processor"] // the paths to the actors that will receive the messages
        cluster {
          enabled = on // to operate in a cluster
          allow-local-routees = on // to allow the router to choose a routee in its node
        }
      }
    }
  }
  remote {
    log-remote-lifecycle-events = on
    artery.canonical { //netty.tcp {
      hostname = ${clustering.ip} // set a host/port for Akka remoting
      port = ${clustering.port}
    }
  }
  cluster {
    // the seed nodes are initial contact points for joining a cluster
    seed-nodes = [ // define the seed nodes to join
      "akka://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port} // "akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]
    auto-down-unreachable-after = 10s
  }
}
// Server (API) configuration
http {
  ip = "127.0.0.1"
  ip = ${?SERVER_IP} // set a default value, then override it if a new one is specified

  port = 8000
  port = ${?SERVER_PORT} // set a default value, then override it if a new one is specified
}
clustering {
  ip = "127.0.0.1"
  ip = ${?CLUSTER_IP}

  port = 2552
  port = ${?CLUSTER_PORT}

  seed-ip = "127.0.0.1"
  seed-ip = ${?CLUSTER_SEED_IP}

  seed-port = 2552
  seed-port = ${?CLUSTER_SEED_PORT}

  cluster.name = "cluster-playground"
}